#!/usr/bin/env python3
"""
–ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è ARMv8 (Debian).
–ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–µ–∑ WebSocket.
"""
import asyncio
import websockets
import numpy as np
import sounddevice as sd
import argparse
import logging
import threading
import time
import webrtcvad
import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
env_path = Path('.env')
if env_path.exists():
    load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SAMPLE_RATE = 16000
CHANNELS = 1
CHUNK = 480  # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è WebRTCVAD (30 –º—Å)
HOST = "0.0.0.0"
WS_PORT = 8765
MAX_BUFFER_SIZE = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
VAD_MODE = 3  # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å VAD (0-3, –≥–¥–µ 3 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è)
SPEECH_START_THRESHOLD = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–µ–π–º–æ–≤ —Ä–µ—á–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–¥–∞—á–∏
SILENCE_THRESHOLD_FRAMES = 20  # ~0.6 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%H:%M:%S'
)

audio_buffer = []
clients = set()
buffer_lock = threading.Lock()  # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—É—Ñ–µ—Ä—É
is_recording = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø–∏—Å—å –≤–∫–ª—é—á–µ–Ω–∞
is_sending = False   # –§–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
vad = None           # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VAD

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ VAD
in_speech = False
speech_frames = 0
silence_frames = 0
speaking_buffer = []

def init_vad():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VAD (Voice Activity Detection)"""
    global vad
    vad = webrtcvad.Vad()
    vad.set_mode(VAD_MODE)
    logging.info(f"VAD –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å—é {VAD_MODE}")

# WebSocket —Ñ—É–Ω–∫—Ü–∏–∏
async def ws_handler(websocket):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    clients.add(websocket)
    client_ip = websocket.remote_address[0]
    logging.info(f"–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {client_ip}")
    try:
        await websocket.wait_closed()
    finally:
        clients.remove(websocket)
        logging.info(f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: {client_ip}")

async def broadcast_audio(audio_data):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    global is_sending
    
    if not clients:
        return
    
    is_sending = True
    try:
        data_bytes = audio_data.tobytes()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
        disconnected = set()
        for client in clients:
            try:
                await client.send(data_bytes)
            except websockets.exceptions.ConnectionClosed:
                disconnected.add(client)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
                disconnected.add(client)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        for client in disconnected:
            clients.remove(client)
        
        if disconnected:
            logging.info(f"–û—Ç–∫–ª—é—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(disconnected)}, –æ—Å—Ç–∞–ª–æ—Å—å: {len(clients)}")
    finally:
        is_sending = False

def list_audio_devices():
    """–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤–≤–æ–¥–∞"""
    logging.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞:")
    devices = sd.query_devices()
    for i, dev in enumerate(devices):
        if dev['max_input_channels'] > 0:
            logging.info(f"–ò–Ω–¥–µ–∫—Å {i}: {dev['name']} (–≤—Ö–æ–¥–æ–≤: {dev['max_input_channels']})")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏ —Å VAD
def process_vad(audio_frame):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é VAD –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—á–∏"""
    global in_speech, speech_frames, silence_frames, speaking_buffer
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º float32 –≤ int16 –¥–ª—è VAD
        frame_bytes = audio_frame.tobytes()
        
        is_speech = vad.is_speech(frame_bytes, SAMPLE_RATE)
        
        if not in_speech:
            if is_speech:
                speech_frames += 1
                speaking_buffer.append(audio_frame)
                if speech_frames >= SPEECH_START_THRESHOLD:
                    in_speech = True
                    silence_frames = 0
                    logging.debug("–†–µ—á—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–¥–∞—á–∏")
                    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ä–µ—á–∏
                    print("\rüîä –†–µ—á—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞... ", end="", flush=True)
            else:
                speech_frames = 0
                speaking_buffer = []
        else:
            if is_speech:
                silence_frames = 0
                speaking_buffer.append(audio_frame)
            else:
                silence_frames += 1
                if silence_frames < SILENCE_THRESHOLD_FRAMES:
                    speaking_buffer.append(audio_frame)
                else:
                    in_speech = False
                    speech_frames = 0
                    logging.debug(f"–ö–æ–Ω–µ—Ü —Ä–µ—á–∏, –æ—Ç–ø—Ä–∞–≤–∫–∞ {len(speaking_buffer)} —Ñ—Ä–µ–π–º–æ–≤")
                    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–µ—á–∏
                    print("\rüîç –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—á–∏...         ", end="", flush=True)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä —Ä–µ—á–∏ –≤ –æ–±—â–∏–π –±—É—Ñ–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    if speaking_buffer:
                        combined_speech = np.vstack(speaking_buffer)
                        with buffer_lock:
                            audio_buffer.append(combined_speech)
                        speaking_buffer = []
                        
                        # –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
                        time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                        print("\rüí¨ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...", end="", flush=True)
        
        return is_speech
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ VAD: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –∏–∑ –±—É—Ñ–µ—Ä–∞
async def process_audio_buffer(loop):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞–º"""
    global audio_buffer
    
    while True:
        if len(audio_buffer) > 0 and not is_sending and clients:
            with buffer_lock:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ñ—Ä–µ–π–º –∏–∑ –±—É—Ñ–µ—Ä–∞
                if audio_buffer:
                    audio_data = audio_buffer.pop(0)
                    logging.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö, –æ—Å—Ç–∞–ª–æ—Å—å –≤ –±—É—Ñ–µ—Ä–µ: {len(audio_buffer)}")
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ
                    asyncio.create_task(broadcast_audio(audio_data))
        
        # –†–µ–≥—É–ª–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        await asyncio.sleep(0.02)  # 20 –º—Å - –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞

async def start_microphone(device=None, loop=None):
    """–ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
    global audio_buffer
    
    # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –∞—É–¥–∏–æ
    def audio_callback(indata, frames, time, status):
        global audio_buffer
        
        if status:
            logging.warning(f"–°—Ç–∞—Ç—É—Å –∞—É–¥–∏–æ: {status}")
        
        if is_recording:
            # –ö–æ–ø–∏—Ä—É–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –≤ int16
            audio_data = np.int16(indata * 32767).copy()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ VAD
            if process_vad(audio_data):
                logging.debug("–§—Ä–µ–π–º —Ä–µ—á–∏")
            else:
                logging.debug("–§—Ä–µ–π–º —Ç–∏—à–∏–Ω—ã")
            
            # –õ–æ–≥–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É
            if frames % (SAMPLE_RATE // CHUNK) == 0:
                logging.debug(f"–†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –∞—É–¥–∏–æ: {len(audio_buffer)}")
            
            # –ï—Å–ª–∏ –±—É—Ñ–µ—Ä —Å—Ç–∞–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            if len(audio_buffer) > MAX_BUFFER_SIZE * 3:
                with buffer_lock:
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ MAX_BUFFER_SIZE —Ñ—Ä–µ–π–º–æ–≤
                    audio_buffer = audio_buffer[-MAX_BUFFER_SIZE:]
                logging.warning(f"–ë—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —É–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä: {len(audio_buffer)}")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VAD
        init_vad()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É—Ñ–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        buffer_processor = asyncio.create_task(process_audio_buffer(loop))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –≤–≤–æ–¥–∞ –∞—É–¥–∏–æ
        stream = sd.InputStream(
            samplerate=SAMPLE_RATE,
            channels=CHANNELS,
            callback=audio_callback,
            blocksize=CHUNK,
            dtype='float32',  # –°–æ—Ö—Ä–∞–Ω—è–µ–º float32 –¥–ª—è sounddevice, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int16 –≤ callback
            device=device
        )
        
        with stream:
            logging.info(f"–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—É—â–µ–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {device if device is not None else '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}")
            logging.info(f"–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: {SAMPLE_RATE} –ì—Ü, –∫–∞–Ω–∞–ª–æ–≤: {CHANNELS}")
            logging.info(f"VAD: —Ä–µ–∂–∏–º {VAD_MODE}, —Ä–∞–∑–º–µ—Ä —Ñ—Ä–µ–π–º–∞ {CHUNK} (–ø—Ä–∏–º–µ—Ä–Ω–æ {CHUNK/SAMPLE_RATE*1000:.1f} –º—Å)")
            
            # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –¥–µ—Ä–∂–∏–º –º–∏–∫—Ä–æ—Ñ–æ–Ω –∞–∫—Ç–∏–≤–Ω—ã–º
            while True:
                await asyncio.sleep(1)
                logging.debug(f"–°—Ç–∞—Ç—É—Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: –∞–∫—Ç–∏–≤–µ–Ω, –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}, —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {len(audio_buffer)}")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
        logging.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        devices = sd.query_devices()
        for i, dev in enumerate(devices):
            logging.info(f"  {i} {dev['name']}, ALSA ({dev['max_input_channels']} in, {dev['max_output_channels']} out)")
        raise

async def main():
    global VAD_MODE  # Moved the global declaration to the top of the function
    
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description="–ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è ARMv8")
    parser.add_argument("--device", type=int, help="–ò–Ω–¥–µ–∫—Å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞")
    parser.add_argument("--list-devices", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
    parser.add_argument("--port", type=int, default=WS_PORT, help="–ü–æ—Ä—Ç WebSocket —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--debug", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    parser.add_argument("--vad-mode", type=int, choices=[0, 1, 2, 3], default=VAD_MODE, 
                        help="–†–µ–∂–∏–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ VAD (0-3)")
    args = parser.parse_args()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    VAD_MODE = args.vad_mode
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    if args.list_devices:
        list_audio_devices()
        return
    
    # –ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞
    ws_server = await websockets.serve(ws_handler, HOST, args.port)
    logging.info(f"WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://{HOST}:{args.port}")
    
    # –ü–æ–ª—É—á–∞–µ–º event loop
    loop = asyncio.get_running_loop()
    
    # –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    mic_task = asyncio.create_task(start_microphone(args.device, loop=loop))
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    try:
        await asyncio.gather(mic_task)
    finally:
        ws_server.close()
        await ws_server.wait_closed()

if __name__ == "__main__":
    print("[–ò–ù–§–û] –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n[–ò–ù–§–û] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import sys
        sys.exit(1) 