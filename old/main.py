#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –¥–ª—è ARMv8 (Debian).
–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏ —Å–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.
"""
import argparse
import subprocess
import sys
import os
import signal
import time
import asyncio
import websockets
from pathlib import Path


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ WebSocket-—Å–µ—Ä–≤–µ—Ä–∞
async def wait_for_ws(port, timeout=10):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
    uri = f"ws://localhost:{port}"
    print(f"[–ò–ù–§–û] –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {uri}...")
    start = time.time()
    while time.time() - start < timeout:
        try:
            async with websockets.connect(uri, ping_interval=None):
                print(f"[–ò–ù–§–û] –°–µ—Ä–≤–µ—Ä –Ω–∞ {uri} –¥–æ—Å—Ç—É–ø–µ–Ω.")
                return True
        except Exception:
            await asyncio.sleep(0.5)
    print(f"[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –°–µ—Ä–≤–µ—Ä –Ω–∞ {uri} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ {timeout} —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è")
    return False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
MIC_WS_PORT = 8765
STT_WS_PORT = 8778
VOSK_MODEL_PATH = os.path.join("models", "vosk-model-small-ru-0.22")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
mic_process = None
stt_process = None
should_exit = False

def check_vosk_model():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏ Vosk"""
    if not os.path.exists(VOSK_MODEL_PATH):
        print(f"[–û–®–ò–ë–ö–ê] –ú–æ–¥–µ–ª—å Vosk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {VOSK_MODEL_PATH}")
        print("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å —Å –ø–æ–º–æ—â—å—é --model")
        return False
    return True

def start_mic_service(device=None, port=MIC_WS_PORT):
    """–ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    global mic_process
    
    cmd = [sys.executable, "mic.py"]
    if device is not None:
        cmd.extend(["--device", str(device)])
    cmd.extend(["--port", str(port)])
    
    print(f"[–ò–ù–§–û] –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {' '.join(cmd)}")
    mic_process = subprocess.Popen(cmd)
    return mic_process.poll() is None  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å

def start_stt_service(model_path=VOSK_MODEL_PATH, mic_uri=None, port=STT_WS_PORT):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
    global stt_process
    
    cmd = [sys.executable, "stt.py"]
    cmd.extend(["--model", model_path])
    
    if mic_uri:
        cmd.extend(["--mic-uri", mic_uri])
    else:
        mic_uri = f"ws://localhost:{MIC_WS_PORT}"
        cmd.extend(["--mic-uri", mic_uri])
    
    cmd.extend(["--port", str(port)])
    
    print(f"[–ò–ù–§–û] –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {' '.join(cmd)}")
    stt_process = subprocess.Popen(cmd)
    return stt_process.poll() is None  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å

def stop_services():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    global mic_process, stt_process
    
    print("[–ò–ù–§–û] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    if stt_process and stt_process.poll() is None:
        print("[–ò–ù–§–û] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...")
        stt_process.terminate()
        try:
            stt_process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            stt_process.kill()
    
    if mic_process and mic_process.poll() is None:
        print("[–ò–ù–§–û] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞...")
        mic_process.terminate()
        try:
            mic_process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            mic_process.kill()
    
    print("[–ò–ù–§–û] –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def signal_handler(sig, frame):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è"""
    global should_exit
    print("\n[–ò–ù–§–û] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    should_exit = True
    stop_services()
    sys.exit(0)

def monitor_processes():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    global should_exit, mic_process, stt_process
    
    while not should_exit:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        if mic_process and mic_process.poll() is not None:
            print("[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            start_mic_service()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º STT –ø—Ä–æ—Ü–µ—Å—Å
        if stt_process and stt_process.poll() is not None:
            print("[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            mic_uri = f"ws://localhost:{MIC_WS_PORT}"
            start_stt_service(mic_uri=mic_uri)
        
        time.sleep(2)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (2 —Å–µ–∫—É–Ω–¥—ã)

async def verify_services(mic_port, stt_port):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    mic_ok = await wait_for_ws(mic_port)
    if not mic_ok:
        print("[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º STT —Å–µ—Ä–≤–∏—Å
    stt_ok = await wait_for_ws(stt_port)
    if not stt_ok:
        print("[–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] –°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    return mic_ok and stt_ok

async def async_main():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    global MIC_WS_PORT, STT_WS_PORT, VOSK_MODEL_PATH
    
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description="–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –¥–ª—è ARMv8")
    parser.add_argument("--device", type=int, help="–ò–Ω–¥–µ–∫—Å –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
    parser.add_argument("--mic-port", type=int, default=MIC_WS_PORT, help="–ü–æ—Ä—Ç WebSocket –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
    parser.add_argument("--stt-port", type=int, default=STT_WS_PORT, help="–ü–æ—Ä—Ç WebSocket —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏")
    parser.add_argument("--model", type=str, default=VOSK_MODEL_PATH, help="–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ Vosk")
    parser.add_argument("--list-devices", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ –≤—ã–π—Ç–∏")
    args = parser.parse_args()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    MIC_WS_PORT = args.mic_port
    STT_WS_PORT = args.stt_port
    VOSK_MODEL_PATH = args.model
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if args.list_devices:
        print("[–ò–ù–§–û] –°–ø–∏—Å–æ–∫ –∞—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        subprocess.run([sys.executable, "mic.py", "--list-devices"])
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–µ–ª–∏ Vosk
    if not check_vosk_model():
        return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("\n[–ò–ù–§–û] –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –¥–ª—è ARMv8")
    print(f"[–ò–ù–§–û] –ú–æ–¥–µ–ª—å Vosk: {VOSK_MODEL_PATH}")
    
    # –ó–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    if not start_mic_service(device=args.device, port=MIC_WS_PORT):
        print("[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
        return
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    await asyncio.sleep(1)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
    mic_uri = f"ws://localhost:{MIC_WS_PORT}"
    if not start_stt_service(model_path=VOSK_MODEL_PATH, mic_uri=mic_uri, port=STT_WS_PORT):
        print("[–û–®–ò–ë–ö–ê] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏")
        stop_services()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    await verify_services(MIC_WS_PORT, STT_WS_PORT)
    
    # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print("[–ò–ù–§–û] –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã")
    print("\n[–ò–ù–§–û] –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã:")
    print(f"  –ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å: ws://localhost:{MIC_WS_PORT}")
    print(f"  –°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: ws://localhost:{STT_WS_PORT}")
    print("\n[–ò–ù–§–û] –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—é
    print("\n" + "="*60)
    print("üé§ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Æ –†–ï–ß–ò")
    print("   –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...")
    print("="*60 + "\n")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        monitor_task = loop.run_in_executor(None, monitor_processes)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–¥–æ–ª–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å—Å—è –ø–æ Ctrl+C)
        await monitor_task
    except KeyboardInterrupt:
        pass
    finally:
        stop_services()

def main():
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    try:
        asyncio.run(async_main())
    except KeyboardInterrupt:
        pass
    finally:
        stop_services()

if __name__ == "__main__":
    main() 