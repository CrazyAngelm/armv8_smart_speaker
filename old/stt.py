#!/usr/bin/env python3
"""
–°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –¥–ª—è ARMv8 (Debian).
–ü–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ WebSocket –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Vosk.
"""
import asyncio
import websockets
import json
import os
import sys
import argparse
import logging
import time
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
env_path = Path('.env')
if env_path.exists():
    load_dotenv()

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ Kaldi/Vosk —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
os.environ['VOSK_LOGLEVEL'] = '-1'  # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–µ –∏–º—è
os.environ['VOSK_LOG_LEVEL'] = '-1'  # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TensorFlow
import warnings
warnings.filterwarnings('ignore')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Vosk —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–æ–≤
from vosk import Model, KaldiRecognizer, SetLogLevel

# –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏ Vosk
SetLogLevel(-1)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    datefmt='%H:%M:%S'
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
HOST = "0.0.0.0"
STT_WS_PORT = 8778
MIC_WS_URI = "ws://localhost:8765"
RECONNECT_BASE_DELAY = 1  # –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
RECONNECT_MAX_DELAY = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)
RECONNECT_MAX_RETRIES = 0  # 0 - –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫

# –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ Vosk
VOSK_MODEL_PATH = os.path.join("models", "vosk-model-small-ru-0.22")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
text_buffer = []
is_processing = False
model = None
recognizer = None
reconnect_delay = RECONNECT_BASE_DELAY
reconnect_attempts = 0

def load_model():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global model, recognizer
    
    if not os.path.exists(VOSK_MODEL_PATH):
        logging.error(f"–ú–æ–¥–µ–ª—å Vosk –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {VOSK_MODEL_PATH}")
        return False
    
    try:
        model = Model(VOSK_MODEL_PATH)
        recognizer = KaldiRecognizer(model, 16000)
        logging.info(f"–ú–æ–¥–µ–ª—å Vosk –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {VOSK_MODEL_PATH}")
        return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Vosk
async def process_audio(audio_data):
    global is_processing, text_buffer, recognizer
    
    if is_processing:
        return None
    
    if not recognizer:
        logging.error("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return None
    
    try:
        is_processing = True
        
        # –ü–æ–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.debug(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–º {len(audio_data)} –±–∞–π—Ç")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
        if recognizer.AcceptWaveform(audio_data):
            result = recognizer.Result()
            logging.debug(f"–ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            # –†–∞–∑–±–æ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_json = json.loads(result)
            recognized_text = result_json.get("text", "")
            
            if recognized_text:
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                logging.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {recognized_text}")
                
                # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∑–∞–º–µ—Ç–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                print("\n" + "="*50)
                print(f"üé§ –†–ê–°–ü–û–ó–ù–ê–ù–û: \"{recognized_text}\"")
                print("="*50)
                
                text_buffer.append(recognized_text)
                # –•—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç–µ–∫—Å—Ç–æ–≤
                if len(text_buffer) > 5:
                    text_buffer.pop(0)
                return recognized_text
        else:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            partial = recognizer.PartialResult()
            partial_json = json.loads(partial)
            partial_text = partial_json.get("partial", "")
            if partial_text:
                logging.debug(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {partial_text}")
                # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ –±–µ–∑ —è—Ä–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                print(f"\r–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ: {partial_text}", end="")
        
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        return None
    finally:
        is_processing = False

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–º—É WebSocket
async def connect_to_mic():
    global reconnect_delay, reconnect_attempts
    
    while True:
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
            if reconnect_attempts > 0:
                current_delay = min(reconnect_delay * (2 ** (reconnect_attempts - 1)), RECONNECT_MAX_DELAY)
                logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ {current_delay:.1f} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(current_delay)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            if RECONNECT_MAX_RETRIES > 0 and reconnect_attempts >= RECONNECT_MAX_RETRIES:
                logging.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({RECONNECT_MAX_RETRIES})")
                return
            
            logging.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É: {MIC_WS_URI}")
            reconnect_attempts += 1
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å keepalive ping –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            async with websockets.connect(
                MIC_WS_URI, 
                max_size=2**22, 
                ping_interval=30, 
                ping_timeout=10,
                close_timeout=5
            ) as websocket:
                logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É")
                reconnect_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                reconnect_delay = RECONNECT_BASE_DELAY  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in websocket:
                    if isinstance(message, bytes):
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                        logging.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä–æ–º {len(message)} –±–∞–π—Ç")
                        await process_audio(message)
                    else:
                        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        except asyncio.CancelledError:
            logging.info("–ó–∞–¥–∞—á–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            raise
        except websockets.exceptions.ConnectionClosedError as e:
            logging.warning(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
        except websockets.exceptions.ConnectionClosedOK:
            logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        except websockets.exceptions.InvalidStatusCode as e:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {e}")
        except (OSError, ConnectionRefusedError) as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
        if reconnect_attempts > 0:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É, –ø–æ–ø—ã—Ç–∫–∞ {reconnect_attempts}")

# –í–Ω–µ—à–Ω–∏–π STT WebSocket —Å–µ—Ä–≤–µ—Ä
async def stt_handler(websocket):
    client_ip = websocket.remote_address[0]
    logging.info(f"STT –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {client_ip}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        status = {
            "status": "ready",
            "model": VOSK_MODEL_PATH
        }
        await websocket.send(json.dumps(status))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        async for message in websocket:
            if isinstance(message, bytes):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
                recognized_text = await process_audio(message)
                result = {"text": recognized_text} if recognized_text else {"text": ""}
                await websocket.send(json.dumps(result))
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                try:
                    cmd = json.loads(message)
                    if cmd.get("command") == "get_last_texts":
                        await websocket.send(json.dumps({"texts": text_buffer}))
                    else:
                        await websocket.send(json.dumps({"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"}))
                except json.JSONDecodeError:
                    await websocket.send(json.dumps({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON"}))
    
    except websockets.exceptions.ConnectionClosedError:
        logging.info(f"STT –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: {client_ip}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}")

async def main():
    global VOSK_MODEL_PATH, MIC_WS_URI, RECONNECT_BASE_DELAY, RECONNECT_MAX_DELAY, RECONNECT_MAX_RETRIES
    
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description="–°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –¥–ª—è ARMv8")
    parser.add_argument("--model", type=str, default=VOSK_MODEL_PATH, help="–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ Vosk")
    parser.add_argument("--mic-uri", type=str, default=MIC_WS_URI, help="URI WebSocket –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞")
    parser.add_argument("--port", type=int, default=STT_WS_PORT, help="–ü–æ—Ä—Ç STT WebSocket —Å–µ—Ä–≤–µ—Ä–∞")
    parser.add_argument("--debug", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    parser.add_argument("--reconnect-delay", type=float, default=RECONNECT_BASE_DELAY, 
                        help="–ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)")
    parser.add_argument("--max-reconnect-delay", type=float, default=RECONNECT_MAX_DELAY,
                        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å–µ–∫—É–Ω–¥—ã)")
    parser.add_argument("--max-retries", type=int, default=RECONNECT_MAX_RETRIES,
                        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (0=–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)")
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    VOSK_MODEL_PATH = args.model
    MIC_WS_URI = args.mic_uri
    RECONNECT_BASE_DELAY = args.reconnect_delay
    RECONNECT_MAX_DELAY = args.max_reconnect_delay
    RECONNECT_MAX_RETRIES = args.max_retries
    
    logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å Vosk: {VOSK_MODEL_PATH}")
    logging.info(f"–ú–∏–∫—Ä–æ—Ñ–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {MIC_WS_URI}")
    logging.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: –±–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞={RECONNECT_BASE_DELAY}—Å, "
                 f"–º–∞–∫—Å. –∑–∞–¥–µ—Ä–∂–∫–∞={RECONNECT_MAX_DELAY}—Å, –º–∞–∫—Å. –ø–æ–ø—ã—Ç–æ–∫={RECONNECT_MAX_RETRIES or '–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ'}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    if not load_model():
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å Vosk. –í—ã—Ö–æ–¥.")
        return
    
    # –ó–∞–ø—É—Å–∫ STT WebSocket —Å–µ—Ä–≤–µ—Ä–∞
    stt_server = await websockets.serve(
        stt_handler, 
        HOST, 
        args.port, 
        max_size=2**22,
        ping_interval=30,
        ping_timeout=10
    )
    
    logging.info(f"STT WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://{HOST}:{args.port}")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É
    mic_task = asyncio.create_task(connect_to_mic())
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    try:
        await asyncio.gather(mic_task)
    except asyncio.CancelledError:
        logging.info("–ó–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
    finally:
        stt_server.close()
        await stt_server.wait_closed()

if __name__ == "__main__":
    print("[–ò–ù–§–û] –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n[–ò–ù–§–û] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"[–û–®–ò–ë–ö–ê] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 